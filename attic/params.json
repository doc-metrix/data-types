{"name":"Data-types","tagline":"Data types used in metric specifications.","body":"Data Types\r\n===\r\n\r\n> Specification of data types used in metric specifications.\r\n\r\nA metric may be one of the following data types...\r\n\r\n#### count\r\n\r\nAn `integer` that can only increase.\r\n\r\n\r\n#### integer\r\n\r\nA numeric value that can be written without a fractional component. May increase or decrease.\r\n\r\n\r\n#### numeric\r\n\r\nA numeric value which may have a fractional component (i.e., decimals).\r\n\r\n\r\n#### percentage\r\n\r\nA unitless value on the interval `[0,1]`.\r\n\r\n\r\n#### time\r\n\r\nA value which is a measure of time, having units such as `milliseconds`, `seconds`, `days`, etc.\r\n\r\n===\r\n## Contributing\r\n\r\nTo contribute to the data-type specification, see the contributing [guide](https://github.com/doc-metrix/contributing). Any updates to the specification should be tagged.\r\n\r\n``` bash\r\n$ git tag -a <major.minor.patch> -m \"[UPDATE] version.\"\r\n$ git push origin <major.minor.patch>\r\n```\r\n\r\nUse [semantic versioning](http://semver.org/) (semvar) for communicating versions.\r\n\r\n*\tAny new data types should be communicated as `minor` updates.\r\n*\tAny corrections/value modifications should be `patches`.\r\n* \tAny specification restructuring (changing field names, removing fields, etc) should be communicated as a `major` update.\r\n\r\n\r\n===\r\n## Usage\r\n\r\nThe specification is stored as [JSON](http://json.org/), a lightweight data-interchange format. Many languages provide JSON support: [JavaScript](http://www.json.org/js.html), [Python](https://docs.python.org/2/library/json.html), [Go](http://golang.org/pkg/encoding/json/), [PHP](http://php.net/manual/en/book.json.php), [Java](http://json.org/java/), [Haskell](http://hackage.haskell.org/package/json), and [others](http://json.org/).\r\n\r\nYou are free to use the JSON specification, as is. Simply copy the file and use accordingly.\r\n\r\nFor those using package managers to manage dependencies, we provide package manager support, as outlined below.\r\n\r\n\r\n### Bower\r\n\r\nThe specification is registered as a [Bower](http://bower.io) package. Bower provides a straightforward means for managing dependencies.\r\n\r\nIn order to use Bower, you must first install [Node.js](http://nodejs.org/) and [Git](http://git-scm.com/book/en/Getting-Started-Installing-Git). Once the prerequisites are installed,\r\n\r\n``` bash\r\n$ npm install -g bower\r\n```\r\n\r\nTo [install](http://bower.io/docs/api/#install) the latest specification,\r\n\r\n``` bash\r\n$ bower install doc-metrix-data-types\r\n```\r\n\r\nBower will place the specification in a `bower_components/` directory within the current working directory.\r\n\r\nTo [update](http://bower.io/docs/api/#update) to the latest specification,\r\n\r\n``` bash\r\n$ bower update doc-metrix-data-types\r\n```\r\n\r\n\r\n\r\n## License\r\n\r\n[MIT license](http://opensource.org/licenses/MIT). \r\n\r\n\r\n---\r\n## Copyright\r\n\r\nCopyright &copy; 2014. NodePrime.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}